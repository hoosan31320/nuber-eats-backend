<Owner token 가지고 만들어야 함 - DB에 저장될때 json에 저장>
mutation {
  createDish(input: {
    restaurantId: 2
    name: "Mexican Chicken"
    price: 12
    description: "Delicious"
    options: [
      { 
        name: "Spice Level"
				choices: [{name:"Little Bit"}, {name:"Kill Me"}]
      }
      {
        name: "Pickle"
        extra: 1
      }
      {
        name: "Size"
       	choices:[{name:"L", extra:2}, {name:"XL", extra:5}]
      }
    ]
  }){
    ok
    error
  }
}

<orderItem 2개 생성>
mutation {
  createOrder (input: {
    restaurantId: 2
    items: [
    	{
        dishId: 10
        options: [
          { name: "Spice Level", choice: "Kill Me" }
          { name: "Size", choice: "XL" }
          { name: "Pickle" }
        ]
      },
      {
        dishId: 10
        options: [
          { name: "Size", choice: "L"}
        ]
      }
  	]
  }){
    ok
    error
  }
}




<Owner token 가지고 봐야 할듯>
query {
  restaurant(input:{restaurantId:2}){
    ok
    restaurant{
      menu {
        name
        id
        price
        options {
          name
          choices {
            name
            extra
          }
          extra
        }
      }
    }
  }
}

<Client token 가지고 만들어야 함>
mutation {
  createOrder (input: {
    restaurantId: 2
    items: [
    	{
        dishId: 10
        options: [
          { name: "Spice Level", choice: "Kill Me" }
          { name: "Size", choice: "XL" }
          { name: "Pickle" }
        ]
      }
  	]
  }){
    ok
    error
  }
}


1. http를 통해 request가 jwt middleware로
2. jwt middleware는 헤더에서 토큰을 가져와서 유저를 찾음
3. jwt middleware는 찾은 유저를 req에 넣음
4. graphql context function이 request 내부에서 유저를 가져와 context.user에 넣어줌.
5. context.user를 Guard에 제공